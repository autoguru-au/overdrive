import{r as e,e as o,B as x,q as V,d as H}from"./iframe-BCt8Udfy.js";import{P as N,E as b}from"./Positioner-OQto3sTN.js";import{T as A}from"./Text-jNEoN6Nm.js";var y="_1qliafn0";const C={medium:"2",large:"3"},h=({isOpen:n,closeAfter:u=null,onOpenChange:i})=>{const a=e.useId(),[c,m]=e.useState(!1),p=e.useRef(null),d=e.useRef(null),l=e.useRef(null),r=typeof n=="boolean"?n:c,t=e.useCallback(s=>{typeof n!="boolean"&&m(s),i==null||i(s)},[n,i]),f=e.useCallback(()=>{l.current&&(clearTimeout(l.current),l.current=null),t(!0)},[t]),v=e.useCallback(()=>{l.current&&clearTimeout(l.current),l.current=setTimeout(()=>{t(!1)},500)},[t]),T=e.useCallback(()=>{t(!0)},[t]),E=e.useCallback(()=>{t(!1)},[t]);e.useEffect(()=>{let s;return r&&typeof u=="number"&&(s=setTimeout(()=>t(!1),u)),()=>{s&&clearTimeout(s)}},[u,r,t]),e.useEffect(()=>()=>{l.current&&clearTimeout(l.current)},[]);const _={onMouseEnter:f,onMouseLeave:v,onFocus:T,onBlur:E,"aria-describedby":r?a:void 0},I=e.useCallback(({alignment:s=b.RIGHT,className:q,label:R,size:k="medium"})=>{const w=C[k];return o.createElement(N,{triggerRef:p,alignment:s,isOpen:r},o.createElement(x,{className:q,id:a,ref:d,width:"full",pointerEvents:"none",userSelect:"none",overflow:"hidden",borderRadius:"1",boxShadow:"4",backgroundColour:"gray900",paddingY:"2",paddingX:"3",role:"tooltip"},o.createElement(A,{size:w,colour:"white"},R)))},[r,a]);return{isOpen:r,triggerRef:p,triggerProps:_,PositionedTooltip:I}};try{h.displayName="useTooltip",h.__docgenInfo={description:"Hook for managing tooltip state and interactions",displayName:"useTooltip",props:{isOpen:{defaultValue:null,description:"Whether the tooltip should be controlled externally",name:"isOpen",required:!1,type:{name:"boolean"}},closeAfter:{defaultValue:{value:"null"},description:"Auto-close the tooltip after this many milliseconds",name:"closeAfter",required:!1,type:{name:"number | null"}},onOpenChange:{defaultValue:null,description:"Called when the tooltip open state changes",name:"onOpenChange",required:!1,type:{name:"((isOpen: boolean) => void)"}}}}}catch{}const g=({alignment:n=b.RIGHT,isOpen:u,label:i,children:a,size:c="medium",closeAfter:m=null,testId:p,wrapper:d})=>{const{PositionedTooltip:l,triggerRef:r,triggerProps:t}=h({isOpen:u,closeAfter:m});if(!i)return o.createElement(o.Fragment,null,a);if(d){const f=typeof d=="string"?d:"span";return o.createElement(o.Fragment,null,o.createElement(f,{ref:r,...t,tabIndex:0,...V({testid:p})},a),o.createElement(l,{alignment:n,className:y,label:i,size:c}))}return H.invariant(e.Children.count(a)===1&&e.isValidElement(e.Children.only(a)),"Tooltips without a wrapper should have a single React element as a child"),o.createElement(o.Fragment,null,e.cloneElement(e.Children.only(a),{...t,ref:r}),o.createElement(l,{alignment:n,className:y,label:i,size:c}))};g.displayName="Tooltip";try{g.displayName="Tooltip",g.__docgenInfo={description:`Renders a tooltip that appears when the user hovers over or focuses on the trigger element.

If the provided children are not keyboard-focusable, you can supply set \`wrapper\` to true to
ensure keyboard accessibility. You can also give a tag name to the \`wrapper\` prop.

This component can operate in either controlled or uncontrolled mode:
- In uncontrolled mode, it opens on hover/focus and can auto-close after a specified delay.
- In controlled mode, its visibility is managed externally via the \`isOpen\` prop.`,displayName:"Tooltip",props:{size:{defaultValue:{value:"medium"},description:"Size of the tooltip text",name:"size",required:!1,type:{name:"enum",value:[{value:'"medium"'},{value:'"large"'}]}},isOpen:{defaultValue:null,description:"Whether the tooltip is open. When provided, the tooltip becomes controlled",name:"isOpen",required:!1,type:{name:"boolean"}},label:{defaultValue:null,description:"Text content displayed in the tooltip",name:"label",required:!0,type:{name:"string"}},alignment:{defaultValue:{value:"EAlignment.RIGHT"},description:"Position of the tooltip relative to the trigger element",name:"alignment",required:!1,type:{name:"enum",value:[{value:'"top"'},{value:'"top_left"'},{value:'"top_right"'},{value:'"bottom"'},{value:'"bottom_left"'},{value:'"bottom_right"'},{value:'"left"'},{value:'"right"'}]}},children:{defaultValue:null,description:"The element(s) that trigger the tooltip on hover or focus",name:"children",required:!0,type:{name:"ReactNode"}},closeAfter:{defaultValue:{value:"null"},description:"Auto-close the tooltip after this many milliseconds. Set to null to disable auto-close",name:"closeAfter",required:!1,type:{name:"number | null"}},wrapper:{defaultValue:null,description:"An HTML tag to wrap the tooltip trigger with if children do not contain a keyboard focusable element",name:"wrapper",required:!1,type:{name:"boolean | keyof IntrinsicElements"}},testId:{defaultValue:null,description:"The test ID will be rendered as a data attribute on the element for e2e testing purposes",name:"testId",required:!1,type:{name:"string"}}}}}catch{}export{g as T};
