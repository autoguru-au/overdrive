import{r as n,f as h,e as t,B as o,L as d}from"./iframe-euna8s5s.js";import{T as p}from"./Text-de5ME79G.js";const w=({children:e})=>e?typeof e=="boolean"?t.createElement(p,{"aria-hidden":!0},"â€¢"):n.isValidElement(e)?t.createElement("div",{"aria-hidden":!0},e):t.createElement(p,{"aria-hidden":!0},e):null,u=({as:e="div",alignX:c,alignY:r="center",children:a,dividers:i,noWrap:g,space:m="2",width:f})=>{const s=n.useMemo(()=>h(a),[a]);if(s.length===0)return null;const y=typeof e=="string"&&e in d?d[e]:"div";return t.createElement(o,{alignItems:r,as:e,display:"flex",flexDirection:"row",flexWrap:g?"nowrap":"wrap",gap:m,justifyContent:c,odComponent:"inline",width:f},n.Children.map(s,(l,v)=>l&&t.createElement(o,{alignItems:r,as:y,display:"flex",flexWrap:"nowrap",useVar:"gap"},i&&v>0&&t.createElement(w,null,i),l)))};try{u.displayName="Inline",u.__docgenInfo={description:`Inline arranges child elements horizontally, side by side.
It allows you to control the spacing between items, alignment (horizontal and vertical),
wrapping behavior, and optionally add dividers. Useful for creating a row layout.`,displayName:"Inline",props:{alignX:{defaultValue:null,description:"Sets the horizontal alignment",name:"alignX",required:!1,type:{name:`ConditionalStyleWithResponsiveArray<Values<{ spaceAround: string; 'space-around': string; spaceBetween: string; 'space-between': string; 'space-evenly': string; center: string; centre: string; end: string; flexEnd: string; flexStart: string; start: string; stretch: string; }, { ...; }>, ("mobile" | ... 2 more ... | ...`}},alignY:{defaultValue:{value:"center"},description:"Sets the vertical alignment",name:"alignY",required:!1,type:{name:'ConditionalStyleWithResponsiveArray<Values<{ baseline: "baseline"; center: string; centre: string; end: string; flexEnd: string; flexStart: string; start: string; stretch: string; }, { defaultClass: string; conditions: { mobile: string; tablet: string; desktop: string; largeDesktop: string; }; }>, ("mobile" | ... 2 ...'}},children:{defaultValue:{value:"false (items wrap)"},description:"Control wrapping - `true` prevents items from wrapping to the next line when they overflow the container width",name:"children",required:!0,type:{name:"ReactNode"}},dividers:{defaultValue:null,description:"A divider element to render between each child. Accepts `true`/`false` for default separator or custom JSX",name:"dividers",required:!1,type:{name:"ReactNode"}},noWrap:{defaultValue:null,description:"",name:"noWrap",required:!1,type:{name:"boolean"}},space:{defaultValue:{value:"2"},description:"Defines the gap between list items. Accepts responsive values",name:"space",required:!1,type:{name:'ConditionalStyleWithResponsiveArray<Values<Record<"none" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9", { vars: { [x: string]: `var(--${string})`; }; gap: `var(--${string})`; }>, { defaultClass: string; conditions: { mobile: string; tablet: string; desktop: string; largeDesktop: string; }; }>, ("mobile" | .....'}},as:{defaultValue:{value:"div"},description:"",name:"as",required:!1,type:{name:"string | ComponentClass<any, any> | FunctionComponent<any> | ReactElement<unknown, string | JSXElementConstructor<any>>"}},width:{defaultValue:null,description:"",name:"width",required:!1,type:{name:"ConditionalStyleWithResponsiveArray<Values<{ 'fit-content': \"fit-content\"; 'max-content': \"max-content\"; 'min-content': \"min-content\"; full: \"100%\"; auto: \"auto\"; '1': `var(--${string})`; '2': `var(--${string})`; '3': `var(--${string})`; '4': `var(--${string})`; '5': `var(--${string})`; '6': `var(--${string})`; '7':..."}}}}}catch{}export{u as I};
