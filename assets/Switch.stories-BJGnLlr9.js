import{r as S,e,B as i,z as w,t as _}from"./iframe-CvODe0lv.js";import{T}from"./Text-BkrpKwvM.js";import{$ as v,a as D}from"./useToggleState-DkUn_mzq.js";import{k as E}from"./useFocusRing-CFClkHFQ.js";import{V}from"./VisuallyHidden-DVEhx8Pz.js";import"./useFormReset-nAUXwY0r.js";import"./index-BaxNengk.js";import"./index-BYp0-P5-.js";function $(t,c,m){let{labelProps:p,inputProps:u,isSelected:n,isPressed:h,isDisabled:s,isReadOnly:a}=v(t,c,m);return{labelProps:p,inputProps:{...u,role:"switch",checked:n},isSelected:n,isPressed:h,isDisabled:s,isReadOnly:a}}var q="_6xc8dy0",P="_6xc8dy1 tq83zq0",N="_6xc8dy2",I="_6xc8dy3",g={default:"_6xc8dy4",active:"_6xc8dy5"},L="_6xc8dy6";const o=({className:t,disabled:c,toggled:m,isSelected:p=m,isDisabled:u=c,testId:n,...h})=>{const s={...h,isDisabled:u,isSelected:p},a=D(s),b=S.useRef(null),{inputProps:f}=$(s,a,b),{isFocusVisible:y,focusProps:x}=E();return e.createElement(i,{as:"label",className:[q,t],testId:n},e.createElement(V,null,e.createElement("input",{...f,...x,ref:b})),e.createElement(i,{className:[P,_({size:"5"}),{[I]:f.disabled,[N]:a.isSelected}],...w({disabled:f.disabled,active:a.isSelected,"focus-visible":y})},e.createElement(i,{className:[g.default,{[g.active]:a.isSelected}]})),s.children)};try{o.displayName="Switch",o.__docgenInfo={description:"The Switch component should be used with a label. The text that describes the switch can be passed in as children\nwhere it will be associated with the switch automatically. If it a more complex layout is and the text label is\nlocated outside the component ensure that `<Switch>` has an `id` and the label element has an `htmlFor` with that id.",displayName:"Switch",props:{"aria-labelledby":{defaultValue:null,description:"Identifies the element (or elements) that labels the current element.",name:"aria-labelledby",required:!1,type:{name:"string"}},name:{defaultValue:null,description:"The name of the input element, used when submitting an HTML form. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefname).",name:"name",required:!1,type:{name:"string"}},value:{defaultValue:null,description:"The value of the input element, used when submitting an HTML form. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefvalue).",name:"value",required:!1,type:{name:"string"}},isDisabled:{defaultValue:null,description:"Whether the input is disabled.",name:"isDisabled",required:!1,type:{name:"boolean"}},isSelected:{defaultValue:null,description:"Whether the Switch should be selected (controlled).",name:"isSelected",required:!1,type:{name:"boolean"}},onChange:{defaultValue:null,description:"Handler that is called when the Switch's selection state changes.",name:"onChange",required:!1,type:{name:"((isSelected: boolean) => void)"}},className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}},disabled:{defaultValue:null,description:"@deprecated use isDisabled instead",name:"disabled",required:!1,type:{name:"boolean"}},toggled:{defaultValue:null,description:"@deprecated use isSelected instead",name:"toggled",required:!1,type:{name:"boolean"}},testId:{defaultValue:null,description:"The test ID will be rendered as a data attribute `data-testid` on the element for use with test assertions",name:"testId",required:!1,type:{name:"string"}}}}}catch{}const{fn:O}=__STORYBOOK_MODULE_TEST__,C={title:"Forms & Input Fields/Switch",component:o,tags:[],args:{name:"switch",value:"yes",isSelected:void 0,isDisabled:void 0,onChange:O()},argTypes:{isSelected:{control:"boolean"},disabled:{control:!1},toggled:{control:!1}}},l={args:{children:e.createElement(T,null,"Text description for the switch"),className:L}},r={render:t=>e.createElement(i,{display:"flex",alignItems:"center",style:{gap:"0.75rem"}},e.createElement(i,{as:"label",htmlFor:t.id},"Text description for the switch"),e.createElement(o,{...t})),args:{id:"test-switch-id"}},d={args:{isDisabled:!0}};l.parameters={...l.parameters,docs:{...l.parameters?.docs,source:{originalSource:`{
  args: {
    children: <Text>Text description for the switch</Text>,
    className: storyLabel
  }
}`,...l.parameters?.docs?.source},description:{story:"Passes in the text label and styles for the layout",...l.parameters?.docs?.description}}};r.parameters={...r.parameters,docs:{...r.parameters?.docs,source:{originalSource:`{
  render: args => <Box display="flex" alignItems="center" style={{
    gap: '0.75rem'
  }}>
            <Box as="label" htmlFor={args['id']}>
                Text description for the switch
            </Box>
            <Switch {...args} />
        </Box>,
  args: {
    id: 'test-switch-id'
  }
}`,...r.parameters?.docs?.source},description:{story:"Custom label using `id` and `htmlFor`",...r.parameters?.docs?.description}}};d.parameters={...d.parameters,docs:{...d.parameters?.docs,source:{originalSource:`{
  args: {
    isDisabled: true
  }
}`,...d.parameters?.docs?.source}}};const k=["Uncontrolled","WithLabel","Disabled"];export{d as Disabled,l as Uncontrolled,r as WithLabel,k as __namedExportsOrder,C as default};
