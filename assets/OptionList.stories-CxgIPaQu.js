import{f as Z,w as le,g as se,e as b,u as E}from"./index-BvIx1Icx.js";import{r as h,R as r}from"./index-Cr_cdoBq.js";import{d as j}from"./dataAttrs-BPvLuXwN.js";import{c as ee}from"./createRuntimeFn-62c9670f.esm-Bn1gNn0k.js";import{o as _}from"./sprinkles.css-BmmMAnkI.js";import{b as re,c as L,d as de,n as ce,e as ue,m as pe}from"./useFocusRing-C8EmTg6J.js";import{$ as O,a as me,b as te,c as be,d as he,e as fe}from"./useField-B8JtYj53.js";import{$ as xe,a as ve}from"./useToggleState-BituFvCf.js";import{V as ye}from"./VisuallyHidden-DgoS8tqs.js";import{I as ge}from"./Icon-B_bwRvwH.js";import{I as we}from"./CheckIcon-qb3DRtZd.js";import"./_commonjsHelpers-C932wzq6.js";import"./Box-Dd8rtt69.js";import"./useLabel-CFfvL_nl.js";import"./useFormReset-uMZiyTvd.js";import"./useFocusable-DFMn06tz.js";function Ie(e,t,a){let l=O({...e,value:t.isSelected}),{isInvalid:s,validationErrors:i,validationDetails:d}=l.displayValidation,{labelProps:o,inputProps:m,isSelected:n,isPressed:c,isDisabled:u,isReadOnly:f}=xe({...e,isInvalid:s},t,a);me(e,l,a);let{isIndeterminate:g,isRequired:x,validationBehavior:w="aria"}=e;h.useEffect(()=>{a.current&&(a.current.indeterminate=!!g)});let{pressProps:v}=re({isDisabled:u||f,onPress(){let{[te]:S}=e,{commitValidation:oe}=S||l;oe()}});return{labelProps:L(o,v),inputProps:{...m,checked:n,"aria-required":x&&w==="aria"||void 0,required:x&&w==="native"},isSelected:n,isPressed:c,isDisabled:u,isReadOnly:f,isInvalid:s,validationErrors:i,validationDetails:d}}const ae=new WeakMap;function ke(e,t){let{isDisabled:a,name:l,validationBehavior:s="aria"}=e,{isInvalid:i,validationErrors:d,validationDetails:o}=t.displayValidation,{labelProps:m,fieldProps:n,descriptionProps:c,errorMessageProps:u}=be({...e,labelElementType:"span",isInvalid:i,errorMessage:e.errorMessage||d});ae.set(t,{name:l,descriptionId:c.id,errorMessageId:u.id,validationBehavior:s});let f=de(e,{labelable:!0}),{focusWithinProps:g}=ce({onBlurWithin:e.onBlur,onFocusWithin:e.onFocus,onFocusWithinChange:e.onFocusChange});return{groupProps:L(f,{role:"group","aria-disabled":a||void 0,...n,...g}),labelProps:m,descriptionProps:c,errorMessageProps:u,isInvalid:i,validationErrors:d,validationDetails:o}}function Ce(e,t,a){const l=ve({isReadOnly:e.isReadOnly||t.isReadOnly,isSelected:t.isSelected(e.value),onChange(v){v?t.addValue(e.value):t.removeValue(e.value),e.onChange&&e.onChange(v)}});let{name:s,descriptionId:i,errorMessageId:d,validationBehavior:o}=ae.get(t);var m;o=(m=e.validationBehavior)!==null&&m!==void 0?m:o;let{realtimeValidation:n}=O({...e,value:l.isSelected,name:void 0,validationBehavior:"aria"}),c=h.useRef(he),u=()=>{t.setInvalid(e.value,n.isInvalid?n:c.current)};h.useEffect(u);let f=t.realtimeValidation.isInvalid?t.realtimeValidation:n,g=o==="native"?t.displayValidation:f;var x;let w=Ie({...e,isReadOnly:e.isReadOnly||t.isReadOnly,isDisabled:e.isDisabled||t.isDisabled,name:e.name||s,isRequired:(x=e.isRequired)!==null&&x!==void 0?x:t.isRequired,validationBehavior:o,[te]:{realtimeValidation:f,displayValidation:g,resetValidation:t.resetValidation,commitValidation:t.commitValidation,updateValidation(v){c.current=v,u()}}},l,a);return{...w,inputProps:{...w.inputProps,"aria-describedby":[e["aria-describedby"],t.isInvalid?d:null,i].filter(Boolean).join(" ")||void 0}}}function $e(e={}){let[t,a]=ue(e.value,e.defaultValue||[],e.onChange),l=!!e.isRequired&&t.length===0,s=h.useRef(new Map),i=O({...e,value:t}),d=i.displayValidation.isInvalid;var o;return{...i,value:t,setValue(n){e.isReadOnly||e.isDisabled||a(n)},isDisabled:e.isDisabled||!1,isReadOnly:e.isReadOnly||!1,isSelected(n){return t.includes(n)},addValue(n){e.isReadOnly||e.isDisabled||t.includes(n)||a(t.concat(n))},removeValue(n){e.isReadOnly||e.isDisabled||t.includes(n)&&a(t.filter(c=>c!==n))},toggleValue(n){e.isReadOnly||e.isDisabled||(t.includes(n)?a(t.filter(c=>c!==n)):a(t.concat(n)))},setInvalid(n,c){let u=new Map(s.current);c.isInvalid?u.set(n,c):u.delete(n),s.current=u,i.updateValidation(fe(...u.values()))},validationState:(o=e.validationState)!==null&&o!==void 0?o:d?"invalid":null,isInvalid:d,isRequired:l}}var Ve="_1kcxloq0 onxwju19",je="_1kcxloq1 onxwju2x onxwju3f onxwju3l onxwjuc",_e="_1kcxloq2 onxwju2u onxwju3c onxwjusr",Le=ee({defaultClassName:"_1kcxloq5 _1kcxloq4 onxwju1r onxwju21 onxwju2a onxwju1g onxwju1ej onxwju14x onxwju14w onxwju1em onxwju47 onxwjucn onxwjugv onxwju23t onxwju23i onxwjujb onxwju1 onxwju24r onxwju24z onxwju25n onxwju263 onxwju26g onxwjupf _1kcxloq3",variantClassNames:{},defaultVariants:{},compoundVariants:[]}),Oe=ee({defaultClassName:"_1kcxloq9 _1kcxloq8 onxwjuoz onxwjunr onxwjulj onxwju1ej onxwju16d onxwju47 onxwju4h onxwjucn onxwju4n onxwjugv onxwju12b onxwju125 onxwjujb onxwjuk7 onxwjulz onxwju24r onxwju257 onxwju254 onxwju25n onxwju263 onxwju26g _1kcxloq7 _1kcxloq6",variantClassNames:{},defaultVariants:{},compoundVariants:[]});const ne=e=>{const t=h.useRef(null),a=h.useContext($),{inputProps:l,isSelected:s}=Ce(e,a,t),{isFocusVisible:i,focusProps:d}=pe();return r.createElement("label",{className:Le(),...j({"focus-visible":i})},r.createElement(ye,null,r.createElement("input",{...L(l,d),ref:t})),r.createElement("div",{className:_({display:"flex",gap:"2",width:"100%"})},r.createElement("div",{className:Oe(),...j({checked:s})},r.createElement(ge,{icon:we})),r.createElement("div",{className:_({alignSelf:"center",font:"sm",width:"100%"})},e.children)))};ne.displayName="OptionList.Item";const ie=({children:e,content:t})=>!e&&!t?null:r.createElement("div",{className:_({display:"flex",gap:"2",justifyContent:"space-between"})},e??(t==null?void 0:t.map((a,l)=>r.createElement("span",{key:l},a))));ie.displayName="OptionList.ItemSplitLabel";try{OptionList.Item.displayName="OptionList.Item",OptionList.Item.__docgenInfo={description:`The OptionListItem is used to populate OptionList. They are outlined with a large interactive area and flexible
label content layout.`,displayName:"OptionList.Item",props:{}}}catch{}const $=h.createContext(null),p=e=>{const{children:t,className:a,description:l,label:s,ref:i,style:d}=e,o={ref:i,className:a,style:d},m=$e(e),{groupProps:n,labelProps:c,descriptionProps:u}=ke(e,m);return r.createElement("div",{...n,...o,...j({"test-id":e.testId})},r.createElement("div",{...c,className:je},s),l&&r.createElement("div",{...u,className:_e},l),r.createElement($.Provider,{value:m},r.createElement("div",{className:Ve},t)))};p.Item=ne;p.ItemSplitLabel=ie;try{$.displayName="OptionListContext",$.__docgenInfo={description:"",displayName:"OptionListContext",props:{}}}catch{}try{p.displayName="OptionList",p.__docgenInfo={description:"The OptionList is a form control that groups selectable items that apear as an outlined list of options and\nimplements React Aria `useCheckboxGroup`\n([docs](https://react-spectrum.adobe.com/react-aria/useCheckboxGroup.html))\n\nPopulate the OptionList group with the OptionListList, each item must have a `value` (unique) and be labelled.\nThe `value` of all active items are passed as a string array to set `defaultValue` (uncontrolled), `value`\n(controlled) and is the format returned from the onChange handler as well.\n\nUsed in the booking flow on the payment step for addons.\nFuture enhancements might include: validation states/error handling",displayName:"OptionList",props:{label:{defaultValue:null,description:"Label for the CheckboxButtons group needs to be provided at the component level for accessibility",name:"label",required:!0,type:{name:"ReactNode"}},description:{defaultValue:null,description:"A description for the field. Provides a hint such as specific requirements for what to choose.",name:"description",required:!1,type:{name:"ReactNode"}},children:{defaultValue:null,description:"Populate with one or more CheckboxItem components",name:"children",required:!1,type:{name:"ReactNode"}},name:{defaultValue:null,description:"The name of the input element, used when submitting an HTML form. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefname).",name:"name",required:!1,type:{name:"string"}},defaultValue:{defaultValue:null,description:"The default value (uncontrolled).",name:"defaultValue",required:!1,type:{name:"string[]"}},value:{defaultValue:null,description:"Current selected value (controlled state)",name:"value",required:!1,type:{name:"string[]"}},onChange:{defaultValue:null,description:`Event handler when any checkbox button changes. Returned string array is the values of the inputs that are currently
checked.`,name:"onChange",required:!1,type:{name:"((value: string[]) => void)"}},testId:{defaultValue:null,description:"The test ID will be rendered as a data attribute on the element for e2e testing purposes",name:"testId",required:!1,type:{name:"string"}}}}}catch{}try{p.Item.displayName="OptionList.Item",p.Item.__docgenInfo={description:`The OptionListItem is used to populate OptionList. They are outlined with a large interactive area and flexible
label content layout.`,displayName:"OptionList.Item",props:{}}}catch{}try{p.ItemSplitLabel.displayName="OptionList.ItemSplitLabel",p.ItemSplitLabel.__docgenInfo={description:"Helper component part to display a checkbox button label with a second column justified to the end",displayName:"OptionList.ItemSplitLabel",props:{content:{defaultValue:null,description:"convenience prop for passing through a string array instead of children",name:"content",required:!1,type:{name:"string[]"}}}}}catch{}const V=[["Tyre puncture repair","+28.00"],["Roadworthy certificate","+89.85"],["Re-gas air-conditioning","+99.00"],["Windscreen wipers - pair","+45.92"]],Se={title:"Forms & Input Fields/Option List",component:p,args:{label:"Commonly requested extras",name:"extras",children:V.map((e,t)=>r.createElement(p.Item,{key:t,value:`${t}`},e[0])),testId:"demo-option-list",onChange:Z()},tags:["beta"]},I={play:async({args:e,canvasElement:t,step:a})=>{const s=le(t).getAllByRole("group")[0],i=se(s,"checkbox");await a("Group renders label and attributes",async()=>{await b(s.firstChild).toHaveTextContent(`${e.label}`),await b(s).toHaveAttribute("data-test-id",e.testId)}),await a("Checkboxes render labels and attributes",async()=>{for(const[d,o]of i.entries()){const m=o.closest("label");await b(m).toHaveTextContent(V[d][0]),await b(o).not.toBeChecked(),await b(o).toHaveAttribute("name",e.name),await b(o).toHaveAttribute("value",`${d}`)}}),await a("Checked states and onChange event",async()=>{for(const d of[0,2]){const o=i[d];await E.click(o,{delay:25}),await b(e.onChange).toHaveBeenCalled(),await b(o).toBeChecked()}}),await a("Keyboard interaction",async()=>{await E.keyboard("{Shift>}[Tab][Tab]{/Shift}[Space][Tab][Tab][Space]",{delay:25}),await b(e.onChange).toHaveBeenCalled(),await b(i[0]).not.toBeChecked(),await b(i[2]).not.toBeChecked()})}},y={args:{children:V.map((e,t)=>r.createElement(p.Item,{key:t,value:`${t}`},r.createElement(p.ItemSplitLabel,{content:e})))}},k={args:{...y.args,defaultValue:["1"]}},C={render:()=>{var l;const[e,t]=h.useState(["0","1","2","3"]),a=s=>{t(s),Z()};return r.createElement(p,{label:(l=Se.args)==null?void 0:l.label,onChange:a,value:e},V.map((s,i)=>r.createElement(p.Item,{key:i,value:`${i}`},r.createElement(p.ItemSplitLabel,{content:s}))))}};var P,R,B,q,D;I.parameters={...I.parameters,docs:{...(P=I.parameters)==null?void 0:P.docs,source:{originalSource:`{
  play: async ({
    args,
    canvasElement,
    step
  }) => {
    const canvas = within(canvasElement);
    const group = canvas.getAllByRole('group')[0];
    const checkboxes = getAllByRole(group, 'checkbox');
    await step('Group renders label and attributes', async () => {
      await expect(group.firstChild).toHaveTextContent(\`\${args.label}\`);
      await expect(group).toHaveAttribute('data-test-id', args.testId);
    });
    await step('Checkboxes render labels and attributes', async () => {
      for (const [idx, checkbox] of checkboxes.entries()) {
        const label = checkbox.closest('label');
        await expect(label).toHaveTextContent(itemData[idx][0]);
        await expect(checkbox).not.toBeChecked();
        await expect(checkbox).toHaveAttribute('name', args.name);
        await expect(checkbox).toHaveAttribute('value', \`\${idx}\`);
      }
    });
    await step('Checked states and onChange event', async () => {
      for (const idx of [0, 2]) {
        const checkbox = checkboxes[idx];
        await userEvent.click(checkbox, {
          delay: 25
        });
        await expect(args.onChange).toHaveBeenCalled();
        await expect(checkbox).toBeChecked();
      }
    });
    await step('Keyboard interaction', async () => {
      await userEvent.keyboard('{Shift>}[Tab][Tab]{/Shift}[Space][Tab][Tab][Space]', {
        delay: 25
      });
      await expect(args.onChange).toHaveBeenCalled();
      await expect(checkboxes[0]).not.toBeChecked();
      await expect(checkboxes[2]).not.toBeChecked();
    });
  }
}`,...(B=(R=I.parameters)==null?void 0:R.docs)==null?void 0:B.source},description:{story:"For simple content, map through the options, e.g.\n\n```\nitemData.map((item, idx) => (\n  <CheckboxButtons.Item key={idx} value={`${idx}`}>\n    {item[0]}\n  </CheckboxButtons.Item>\n))\n```",...(D=(q=I.parameters)==null?void 0:q.docs)==null?void 0:D.description}}};var N,T,H,A,M;y.parameters={...y.parameters,docs:{...(N=y.parameters)==null?void 0:N.docs,source:{originalSource:`{
  args: {
    children: itemData.map((data, idx) => <OptionList.Item key={idx} value={\`\${idx}\`}>
                <OptionList.ItemSplitLabel content={data} />
            </OptionList.Item>)
  }
}`,...(H=(T=y.parameters)==null?void 0:T.docs)==null?void 0:H.source},description:{story:"To acheive the the split-column layout in the checkbox label, use a CheckboxButtons.SplitLabel layout helper\ninside the CheckboxButtons.Item component. Currently supports text only. Populate the `content` prop on the SplitLabel\nwith a string array (content left, content right).",...(M=(A=y.parameters)==null?void 0:A.docs)==null?void 0:M.description}}};var F,W,G,z,K;k.parameters={...k.parameters,docs:{...(F=k.parameters)==null?void 0:F.docs,source:{originalSource:`{
  args: {
    ...SplitLabel.args,
    defaultValue: ['1']
  }
}`,...(G=(W=k.parameters)==null?void 0:W.docs)==null?void 0:G.source},description:{story:"The second option is checked by default, but the inputs are uncontrolled.",...(K=(z=k.parameters)==null?void 0:z.docs)==null?void 0:K.description}}};var U,J,Q,X,Y;C.parameters={...C.parameters,docs:{...(U=C.parameters)==null?void 0:U.docs,source:{originalSource:`{
  render: () => {
    const [currentValue, setCurrentValue] = useState<string[]>(['0', '1', '2', '3']);
    const handleOnChange = (values: string[]) => {
      setCurrentValue(values);
      fn();
    };
    return <OptionList label={meta.args?.label} onChange={handleOnChange} value={currentValue}>
                {itemData.map((data, idx) => <OptionList.Item key={idx} value={\`\${idx}\`}>
                        <OptionList.ItemSplitLabel content={data} />
                    </OptionList.Item>)}
            </OptionList>;
  }
}`,...(Q=(J=C.parameters)==null?void 0:J.docs)==null?void 0:Q.source},description:{story:`Controlled state with onChange handler. Each checkbox item must have a unique value because the state is handled as
an array of the selected values.`,...(Y=(X=C.parameters)==null?void 0:X.docs)==null?void 0:Y.description}}};const Ue=["Simple","SplitLabel","DefaultChecked","Controlled"];export{C as Controlled,k as DefaultChecked,I as Simple,y as SplitLabel,Ue as __namedExportsOrder,Se as default};
