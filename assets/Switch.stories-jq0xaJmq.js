import{r as O,e,B as i,v as I,A as B}from"./iframe-CapgcpQw.js";import{T as M}from"./Text-BGIV1zEQ.js";import{$ as H,a as W}from"./useToggleState-C5OMbuFF.js";import{k as F}from"./useFocusRing-mJQhrZUq.js";import{V as R}from"./VisuallyHidden-Dl09BDzQ.js";import"./useFormReset-zFtOV40l.js";import"./index-US934iSr.js";import"./index-BjkrVkV4.js";function U(t,c,m){let{labelProps:p,inputProps:u,isSelected:n,isPressed:h,isDisabled:s,isReadOnly:a}=H(t,c,m);return{labelProps:p,inputProps:{...u,role:"switch",checked:n},isSelected:n,isPressed:h,isDisabled:s,isReadOnly:a}}var z="_6xc8dy0",C="_6xc8dy1 tq83zq0",k="_6xc8dy2",A="_6xc8dy3",g={default:"_6xc8dy4",active:"_6xc8dy5"},K="_6xc8dy6";const o=({className:t,disabled:c,toggled:m,isSelected:p=m,isDisabled:u=c,testId:n,...h})=>{const s={...h,isDisabled:u,isSelected:p},a=W(s),b=O.useRef(null),{inputProps:f}=U(s,a,b),{isFocusVisible:N,focusProps:L}=F();return e.createElement(i,{as:"label",className:[z,t],testId:n},e.createElement(R,null,e.createElement("input",{...f,...L,ref:b})),e.createElement(i,{className:[C,B({size:"5"}),{[A]:f.disabled,[k]:a.isSelected}],...I({disabled:f.disabled,active:a.isSelected,"focus-visible":N})},e.createElement(i,{className:[g.default,{[g.active]:a.isSelected}]})),s.children)};try{o.displayName="Switch",o.__docgenInfo={description:"The Switch component should be used with a label. The text that describes the switch can be passed in as children\nwhere it will be associated with the switch automatically. If it a more complex layout is and the text label is\nlocated outside the component ensure that `<Switch>` has an `id` and the label element has an `htmlFor` with that id.",displayName:"Switch",props:{"aria-labelledby":{defaultValue:null,description:"Identifies the element (or elements) that labels the current element.",name:"aria-labelledby",required:!1,type:{name:"string"}},name:{defaultValue:null,description:"The name of the input element, used when submitting an HTML form. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefname).",name:"name",required:!1,type:{name:"string"}},value:{defaultValue:null,description:"The value of the input element, used when submitting an HTML form. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefvalue).",name:"value",required:!1,type:{name:"string"}},isDisabled:{defaultValue:null,description:"Whether the input is disabled.",name:"isDisabled",required:!1,type:{name:"boolean"}},isSelected:{defaultValue:null,description:"Whether the Switch should be selected (controlled).",name:"isSelected",required:!1,type:{name:"boolean"}},onChange:{defaultValue:null,description:"Handler that is called when the Switch's selection state changes.",name:"onChange",required:!1,type:{name:"((isSelected: boolean) => void)"}},className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}},disabled:{defaultValue:null,description:"@deprecated use isDisabled instead",name:"disabled",required:!1,type:{name:"boolean"}},toggled:{defaultValue:null,description:"@deprecated use isSelected instead",name:"toggled",required:!1,type:{name:"boolean"}},testId:{defaultValue:null,description:"The test ID will be rendered as a data attribute on the element for e2e testing purposes",name:"testId",required:!1,type:{name:"string"}}}}}catch{}const{fn:Y}=__STORYBOOK_MODULE_TEST__,ae={title:"Primatives/Switch",component:o,tags:[],args:{name:"switch",value:"yes",isSelected:void 0,isDisabled:void 0,onChange:Y()},argTypes:{isSelected:{control:"boolean"},disabled:{control:!1},toggled:{control:!1}}},l={args:{children:e.createElement(M,null,"Text description for the switch"),className:K}},r={render:t=>e.createElement(i,{display:"flex",alignItems:"center",style:{gap:"0.75rem"}},e.createElement(i,{as:"label",htmlFor:t.id},"Text description for the switch"),e.createElement(o,{...t})),args:{id:"test-switch-id"}},d={args:{isDisabled:!0}};var y,x,S,w,_;l.parameters={...l.parameters,docs:{...(y=l.parameters)==null?void 0:y.docs,source:{originalSource:`{
  args: {
    children: <Text>Text description for the switch</Text>,
    className: storyLabel
  }
}`,...(S=(x=l.parameters)==null?void 0:x.docs)==null?void 0:S.source},description:{story:"Passes in the text label and styles for the layout",...(_=(w=l.parameters)==null?void 0:w.docs)==null?void 0:_.description}}};var v,T,D,E,P;r.parameters={...r.parameters,docs:{...(v=r.parameters)==null?void 0:v.docs,source:{originalSource:`{
  render: args => <Box display="flex" alignItems="center" style={{
    gap: '0.75rem'
  }}>
            <Box as="label" htmlFor={args['id']}>
                Text description for the switch
            </Box>
            <Switch {...args} />
        </Box>,
  args: {
    id: 'test-switch-id'
  }
}`,...(D=(T=r.parameters)==null?void 0:T.docs)==null?void 0:D.source},description:{story:"Custom label using `id` and `htmlFor`",...(P=(E=r.parameters)==null?void 0:E.docs)==null?void 0:P.description}}};var V,$,q;d.parameters={...d.parameters,docs:{...(V=d.parameters)==null?void 0:V.docs,source:{originalSource:`{
  args: {
    isDisabled: true
  }
}`,...(q=($=d.parameters)==null?void 0:$.docs)==null?void 0:q.source}}};const se=["Uncontrolled","WithLabel","Disabled"];export{d as Disabled,l as Uncontrolled,r as WithLabel,se as __namedExportsOrder,ae as default};
