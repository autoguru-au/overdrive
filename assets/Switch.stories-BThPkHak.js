import{f as H}from"./index-mRD-OtaA.js";import{r as M,R as e}from"./index-DVCUSwsV.js";import{c as b,B as d}from"./Box-Mcr8v5d2.js";/* empty css                                    */import{$ as R,a as W}from"./useToggleState-CAtekvEs.js";import{d as y}from"./dataAttrs-C4KudU4k.js";import{k as F}from"./useFocusRing-DrvvwdnC.js";import{V as O}from"./VisuallyHidden-B1yoQnJu.js";import{u as z}from"./useTextStyles-nxerGMDs.js";import{T as C}from"./Text-LGFJc6x1.js";import"./_commonjsHelpers-gnU0ypJ3.js";import"./useFormReset-fOvLRzxe.js";import"./index-DvpLutvZ.js";import"./index-DCvUOfvz.js";function U(t,c,m){let{labelProps:p,inputProps:u,isSelected:i,isPressed:h,isDisabled:s,isReadOnly:a}=R(t,c,m);return{labelProps:p,inputProps:{...u,role:"switch",checked:i},isSelected:i,isPressed:h,isDisabled:s,isReadOnly:a}}var k="_6xc8dy0",A="_6xc8dy1 tq83zq0",j="_6xc8dy2",G="_6xc8dy3",x={default:"_6xc8dy4",active:"_6xc8dy5"},J="_6xc8dy6";const o=({className:t,disabled:c,toggled:m,isSelected:p=m,isDisabled:u=c,testId:i,...h})=>{const s={...h,isDisabled:u,isSelected:p},a=W(s),g=M.useRef(null),{inputProps:f}=U(s,a,g),{isFocusVisible:L,focusProps:B}=F();return e.createElement("label",{className:b(k,t),...y({"test-id":i})},e.createElement(O,null,e.createElement("input",{...f,...B,ref:g})),e.createElement(d,{className:b(A,z({size:"5"}),{[G]:f.disabled,[j]:a.isSelected}),...y({disabled:f.disabled,active:a.isSelected,"focus-visible":L})},e.createElement(d,{className:b(x.default,{[x.active]:a.isSelected})})),s.children)};try{o.displayName="Switch",o.__docgenInfo={description:"The Switch component should be used with a label. The text that describes the switch can be passed in as children\nwhere it will be associated with the switch automatically. If it a more complex layout is and the text label is\nlocated outside the component ensure that `<Switch>` has an `id` and the label element has an `htmlFor` with that id.",displayName:"Switch",props:{"aria-labelledby":{defaultValue:null,description:"Identifies the element (or elements) that labels the current element.",name:"aria-labelledby",required:!1,type:{name:"string"}},name:{defaultValue:null,description:"The name of the input element, used when submitting an HTML form. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefname).",name:"name",required:!1,type:{name:"string"}},value:{defaultValue:null,description:"The value of the input element, used when submitting an HTML form. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefvalue).",name:"value",required:!1,type:{name:"string"}},isDisabled:{defaultValue:null,description:"Whether the input is disabled.",name:"isDisabled",required:!1,type:{name:"boolean"}},isSelected:{defaultValue:null,description:"Whether the Switch should be selected (controlled).",name:"isSelected",required:!1,type:{name:"boolean"}},onChange:{defaultValue:null,description:"Handler that is called when the Switch's selection state changes.",name:"onChange",required:!1,type:{name:"((isSelected: boolean) => void)"}},className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}},disabled:{defaultValue:null,description:"@deprecated use isDisabled instead",name:"disabled",required:!1,type:{name:"boolean"}},toggled:{defaultValue:null,description:"@deprecated use isSelected instead",name:"toggled",required:!1,type:{name:"boolean"}},testId:{defaultValue:null,description:"The test ID will be rendered as a data attribute on the element for e2e testing purposes",name:"testId",required:!1,type:{name:"string"}}}}}catch{}const oe={title:"Primatives/Switch",component:o,tags:["updated"],args:{name:"switch",value:"yes",isSelected:void 0,isDisabled:void 0,onChange:H()},argTypes:{isSelected:{control:"boolean"},disabled:{control:!1},toggled:{control:!1}}},l={args:{children:e.createElement(C,null,"Text description for the switch"),className:J}},r={render:t=>e.createElement(d,{display:"flex",alignItems:"center",style:{gap:"0.75rem"}},e.createElement(d,{as:"label",htmlFor:t.id},"Text description for the switch"),e.createElement(o,{...t})),args:{id:"test-switch-id"}},n={args:{isDisabled:!0}};var S,w,v,T,_;l.parameters={...l.parameters,docs:{...(S=l.parameters)==null?void 0:S.docs,source:{originalSource:`{
  args: {
    children: <Text>Text description for the switch</Text>,
    className: storyLabel
  }
}`,...(v=(w=l.parameters)==null?void 0:w.docs)==null?void 0:v.source},description:{story:"Passes in the text label and styles for the layout",...(_=(T=l.parameters)==null?void 0:T.docs)==null?void 0:_.description}}};var D,E,P,V,$;r.parameters={...r.parameters,docs:{...(D=r.parameters)==null?void 0:D.docs,source:{originalSource:`{
  render: args => <Box display="flex" alignItems="center" style={{
    gap: '0.75rem'
  }}>
            <Box as="label" htmlFor={args['id']}>
                Text description for the switch
            </Box>
            <Switch {...args} />
        </Box>,
  args: {
    id: 'test-switch-id'
  }
}`,...(P=(E=r.parameters)==null?void 0:E.docs)==null?void 0:P.source},description:{story:"Custom label using `id` and `htmlFor`",...($=(V=r.parameters)==null?void 0:V.docs)==null?void 0:$.description}}};var q,N,I;n.parameters={...n.parameters,docs:{...(q=n.parameters)==null?void 0:q.docs,source:{originalSource:`{
  args: {
    isDisabled: true
  }
}`,...(I=(N=n.parameters)==null?void 0:N.docs)==null?void 0:I.source}}};const ce=["Uncontrolled","WithLabel","Disabled"];export{n as Disabled,l as Uncontrolled,r as WithLabel,ce as __namedExportsOrder,oe as default};
