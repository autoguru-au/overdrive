@import '../../theme/tokens/facade';

:root {
	--global--input--min--width: 280px;
	--global--input--status--icon--size: 24px;
	--global--input--status--icon--gap: 20px;
}

.root {
}

$active_scaling_factor: 0.7777;
$active_padding_added: var(--global--space--2); // 8

$size: 64px; // Hardcoded values are fixes for edge not supporting css variable inside transform
$font_size: var(--global--fontSize--6); //18

@function calcPlaceholderTranslate($notched) {
	// TODO hard-coding these values is due to edge struggling width cal and variables mixed together

	/* stylelint-disable */

	@if $notched == true {
		@return translate(
			/*calc(var(--global--space--3) + #{$active_padding_added})
			 calc(-1 * (((#{$font_size}) * #{$active_scaling_factor}) / 2))*/
				(12px + 8px),
			(-1 * (18px * $active_scaling_factor)/ 2)
		);
	} @else {
		@return translate(
			/*var(--global--space--5)
			calc(((#{$size} - #{$font_size}) / 2))*/
				20px,
			((64px - 18)/2)
		);
	}
	/* stylelint-enable */
}

.notched-base {
	width: 100%;
	min-width: var(--global--input--min--width);
	position: relative;
	display: inline-flex;
	flex-direction: column;
	padding: 0;

	input,
	textarea,
	select {
		-webkit-appearance: none;
		appearance: none;
		outline: none;
		border: none;
		background: transparent;
	}

	input[type='number'] {
		&,
		&::-webkit-inner-spin-button,
		&::-webkit-outer-spin-button {
			appearance: textfield;
			margin: 0;
		}
	}

	&__placeholder {
		position: absolute;
		top: 0;
		left: 0;
		display: inline;
		margin: 0;
		padding: 0;
		color: getColour(gray, 400);
		font-size: #{$font_size};
		line-height: 1;
		white-space: nowrap;
		transform-origin: top left;
		transform: calcPlaceholderTranslate(false) scale(1);
		transition: color 0.2s cubic-bezier(0, 0, 0.2, 1) 0s,
			transform 0.2s cubic-bezier(0, 0, 0.2, 1) 0s;
		pointer-events: none;

		.notched-base--shift & {
			z-index: 2;
			transform: calcPlaceholderTranslate(true)
				scale(#{$active_scaling_factor});

			.root:hover & {
				color: getColour(blue, 500);
			}

			.root.valid & {
				color: getColour(green, 600);
			}

			.root.valid:hover & {
				color: getColour(green, 700);
			}

			.root.invalid & {
				color: getColour(red, 600);
			}

			.root.invalid:hover & {
				color: getColour(red, 700);
			}
		}

		.root.valid .notched-base--shift.notched-base--active &,
		.root.valid:hover .notched-base--shift.notched-base--active & {
			color: getColour(green, 800);
		}

		.root.invalid .notched-base--shift.notched-base--active &,
		.root.invalid:hover .notched-base--shift.notched-base--active & {
			color: getColour(red, 800);
		}

		.notched-base--shift.notched-base--active & {
			color: getColour(blue, 500);
		}
	}

	// The container per-se
	&__border {
		display: flex;
		position: absolute;
		z-index: 2;
		top: 0;
		left: 0;
		right: 0;
		width: 100%;
		height: 100%;
		text-align: left;
		pointer-events: none;
		box-shadow: 0 1px 10px 0 rgba(0, 0, 0, 0.03),
			0 4px 5px 0 rgba(0, 0, 0, 0.03), 0 2px 4px -1px rgba(0, 0, 0, 0.05);

		&__leading,
		&__notch,
		&__trailing {
			display: inline-flex;
			border: 1px solid getColour(gray, 300);
			transition: border-color 0.2s cubic-bezier(0, 0, 0.2, 1) 0s;
			pointer-events: none;

			.root.valid & {
				border-color: getColour(green, 600);
			}

			.root.valid:hover & {
				border-color: getColour(green, 700);
			}

			.root.valid .notched-base--active &,
			.root.valid:hover .notched-base--active & {
				border-color: getColour(green, 800);
			}

			.root.invalid & {
				border-color: getColour(red, 600);
			}

			.root.invalid:hover & {
				border-color: getColour(red, 700);
			}

			.root.invalid .notched-base--active &,
			.root.invalid:hover .notched-base--active & {
				border-color: getColour(red, 800);
			}

			.notched-base--active &,
			.root:hover & {
				border-color: getColour(blue, 500);
			}
		}

		&__leading {
			width: var(--global--space--4);
			border-radius: var(--global--space--1) 0 0 var(--global--space--1);
			border-right: none;
		}

		&__notch {
			border-width: 0;
			border-bottom-width: 1px;
			transition: width 0.15s linear,
				border-color 0.2s cubic-bezier(0, 0, 0.2, 1) 0s;
		}

		&__trailing {
			flex-grow: 1;
			border-left: none;
			border-radius: 0 var(--global--space--1) var(--global--space--1) 0;
		}
	}
}

// Applies to the native input
.input {
	$input_base_height: 64px;
	$font_size: var(--global--fontSize--6);

	position: relative;
	display: flex;
	z-index: 1;
	margin: 0;
	padding: calc(((#{$input_base_height} - #{$font_size}) / 2) - 3px)
		calc(var(--global--space--5) - 1px);
	width: 100%;
	height: $input_base_height;
	align-self: flex-end;
	line-height: 1;
	font-size: #{$font_size};

	@at-root textarea.input {
		$text_area_height: #{$input_base_height} * 2.5;
		$top_spacing: 8px;

		height: calc(#{$text_area_height});
		min-height: calc(#{$text_area_height});
		resize: vertical;

		@at-root .notched-base--shift & {
			padding-top: 0;
			margin-top: 8px;
			height: calc(#{$text_area_height} - #{$top_spacing});
			min-height: calc(#{$input_base_height} - #{$top_spacing});
		}
	}

	&[disabled] {
		cursor: not-allowed;
	}
}

.hint-text {
	margin-top: var(--global--space--2);
	margin-left: var(--global--space--5);
	color: getColour(gray, 400);
	font-size: var(--global--fontSize--4);
	line-height: 1.14;
	transition: color 0.2s cubic-bezier(0, 0, 0.2, 1) 0s;

	&--active,
	.root:hover & {
		color: getColour(blue, 500);
	}

	.root.valid & {
		color: getColour(green, 600);
	}

	.root.valid:hover & {
		color: getColour(green, 700);
	}

	.root.invalid & {
		color: getColour(red, 600);
	}

	.root.invalid:hover & {
		color: getColour(red, 700);
	}

	&--active {
		.root.invalid &,
		.root.invalid:hover & {
			color: getColour(red, 800);
		}

		.root.valid &,
		.root.valid:hover & {
			color: getColour(green, 800);
		}
	}
}
