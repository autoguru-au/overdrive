@import '../../theme/tokens/facade';

$heightSmall: 36px;
$heightMedium: 48px;
$heightLarge: 64px;
$widthSmall: 36px;

@mixin isHoverState() {
	&:not([disabled]),
	&:not([aria-disabled='true']) {
		&.isHoverState,
		&:hover {
			@content;
		}
	}
}

@mixin isActiveState() {
	&:not([disabled]),
	&:not([aria-disabled='true']) {
		&.isActiveState,
		&:active {
			@content;
		}
	}
}

@mixin isDisabledState() {
	&[disabled],
	&[aria-disabled='true'] {
		cursor: not-allowed;

		&:not(.loading) {
			@content;
		}
	}
}

.root {
	display: inline-block;
	width: auto;
	outline: none;
	font-family: inherit;
	line-height: 1;
	font-weight: 700;
	text-align: center;
	color: white;
	background: none;
	border: 1px solid;
	text-decoration: none;
	cursor: pointer;
	transform: translate(0, 0);
	border-radius: var(--global--space--1);
	transition: color 0.2s cubic-bezier(0, 0, 0.2, 1) 0s,
		background-color 0.2s cubic-bezier(0, 0, 0.2, 1) 0s,
		border-color 0.2s cubic-bezier(0, 0, 0.2, 1) 0s;
}

.fullWidth {
	width: 100%;
}

.rounded {
	border-radius: 50%;
	overflow: hidden;
}

.variant {
	&-primary {
		background-color: getColour(green, 600);
		border-color: getColour(green, 700);

		@include isHoverState() {
			background-color: getColour(green, 700);
			border-color: getColour(green, 800);
		}

		@include isActiveState() {
			background-color: getColour(green, 800);
			border-color: getColour(green, 900);
		}

		@include isDisabledState() {
			background-color: getColour(green, 200);
			border-color: getColour(green, 200);
		}
	}

	&-secondary {
		color: getColour(gray, 700);
		background-color: white;
		border-color: getColour(gray, 300);

		@include isHoverState() {
			background-color: getColour(gray, 100);
			border-color: getColour(gray, 400);
		}

		@include isActiveState() {
			background-color: getColour(gray, 200);
			border-color: getColour(gray, 500);
		}

		@include isDisabledState() {
			background-color: white;
			border-color: getColour(gray, 200);
			color: getColour(gray, 300);
		}
	}

	&-danger {
		background-color: getColour(red, 600);
		border-color: getColour(red, 700);

		@include isHoverState() {
			background-color: getColour(red, 700);
			border-color: getColour(red, 800);
		}

		@include isActiveState() {
			background-color: getColour(red, 800);
			border-color: getColour(red, 900);
		}

		@include isDisabledState() {
			background-color: getColour(red, 200);
			border-color: getColour(red, 200);
		}
	}
}

.size {
	&-small {
		$size: $heightSmall;
		$font_size: var(--global--fontSize--3);
		$verticalPadding: calc(((#{$size} - #{$font_size}) / 2) - 1px);

		font-size: #{$font_size};
		padding: $verticalPadding calc(var(--global--space--3) - 1px);
		min-width: 64px;

		&.rounded {
			width: $size;
			height: $size;
			min-width: auto;
			padding: $verticalPadding 0;
		}
	}

	&-medium {
		$size: $heightMedium;
		$font_size: var(--global--fontSize--4);
		$verticalPadding: calc(((#{$size} - #{$font_size}) / 2) - 1px);

		font-size: #{$font_size};
		padding: $verticalPadding calc(var(--global--space--4) - 1px);
		min-width: 96px;

		&.rounded {
			width: $size;
			height: $size;
			min-width: auto;
			padding: $verticalPadding 0;
		}
	}

	&-large {
		$size: $heightLarge;
		$font_size: var(--global--fontSize--6);
		$verticalPadding: calc(((#{$size} - #{$font_size}) / 2) - 1px);

		font-size: #{$font_size};
		padding: $verticalPadding calc(var(--global--space--5) - 1px);
		min-width: 128px;

		&.rounded {
			width: $size;
			height: $size;
			min-width: auto;
			padding: $verticalPadding 0;
		}
	}
}

.loading {
	position: relative;

	.btn-content {
		visibility: hidden;
	}
}

.spinner {
	pointer-events: none;
	position: absolute;
	left: 50%;
	top: 50%;
	transform: translate(-50%, -50%);
}
