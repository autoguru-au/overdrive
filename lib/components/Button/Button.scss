@import '../../theme/tokens/facade';

@mixin isState($state, $nest: false) {
	@if $nest {
		$sel: &;

		@at-root .root:not([disabled]):#{$state} {
			#{$sel} {
				@content;
			}
		}
	} @else {
		@at-root &.root:not([disabled]):#{$state} {
			@content;
		}
	}
}

.root {
	display: inline-block;
	overflow: hidden;
	width: auto;
	outline: none;
	font-family: inherit;
	line-height: 1;
	font-weight: 500;
	text-align: center;
	color: white;
	fill: currentColor;
	background: none;
	border: none;
	text-decoration: none;
	cursor: pointer;
	user-select: none;
	transform: translate(0, 0) scale(1);
	will-change: transform;
	border-radius: var(--global--space--1);
	transition-delay: 0s;
	transition-duration: 0.2s;
	transition-timing-function: cubic-bezier(0, 0, 0.2, 1);
	transition-property: color, background-color, border-color, box-shadow,
		transform;

	&[disabled] {
		cursor: not-allowed;

		&:not(.loading) {
			opacity: 0.3;
		}
	}

	@include isState('active') {
		&:not(.minimal) {
			transform: translate(0, 1px) scale(1);
		}
	}
}

.body {
	display: grid;
	grid-auto-flow: column dense;
	grid-gap: var(--global--space--1);
	justify-content: center;
	align-items: center;
	height: 100%;
}

// Sizes
.small,
.medium {
	&.minimal {
		min-width: auto;
	}
}

.small {
	$height: 36px;

	grid-gap: var(--global--space--1);
	font-size: var(--global--fontSize--3);
	line-height: var(--global--fontSize--3--lh);
	min-width: 48px;
	height: $height;

	&:not(.loading) {
		padding: 0 var(--global--space--3);
	}

	&.rounded {
		min-width: $height;
		border-radius: calc(#{$height} / 2);
	}

	&.iconOnly {
		width: 36px;
		height: 36px;
	}
}

.medium {
	$height: 48px;

	grid-gap: var(--global--space--2);
	font-size: var(--global--fontSize--4);
	line-height: var(--global--fontSize--4--lh);
	min-width: 96px;
	height: $height;

	&:not(.loading) {
		padding: 0 var(--global--space--4);
	}

	&.rounded {
		min-width: $height;
		border-radius: calc(#{$height} / 2);
	}

	&.iconOnly {
		width: 48px;
		height: 48px;
	}
}

.fullWidth {
	display: grid;
	width: 100%;
}

// Variants
.variantPrimary {
	background-color: getColour(green, 600);
	box-shadow: inset 0 0 0 1px getColour(green, 700),
		0 1px 10px 0 rgba(0, 0, 0, 0.06), 0 4px 5px 0 rgba(0, 0, 0, 0.06),
		0 2px 4px -1px rgba(0, 0, 0, 0.1);

	&.minimal {
		color: getColour(gray, 700);
		background-color: transparent;
		box-shadow: none;
	}

	@include isState('hover') {
		color: white;
		background-color: getColour(green, 700);
		box-shadow: inset 0 0 0 1px getColour(green, 800),
			0 3px 14px 2px rgba(0, 0, 0, 0.06),
			0 8px 10px 1px rgba(0, 0, 0, 0.06),
			0 5px 5px -3px rgba(0, 0, 0, 0.1);

		&.minimal {
			color: getColour(green, 900);
			background-color: getColour(green, 100);
			box-shadow: none;
		}
	}

	@include isState('active') {
		color: white;
		background-color: getColour(green, 800);
		box-shadow: inset 0 0 0 1px getColour(green, 9800),
			0 1px 5px 0 rgba(0, 0, 0, 0.06), 0 2px 2px 0 rgba(0, 0, 0, 0.06),
			0 3px 1px -2px rgba(0, 0, 0, 0.1);

		&.minimal {
			color: getColour(green, 900);
			background-color: getColour(green, 200);
			box-shadow: none;
		}
	}
}

.variantSecondary {
	color: getColour(gray, 700);
	background-color: white;
	box-shadow: inset 0 0 0 1px getColour(gray, 300),
		var(--global--elevationBoxShadow--2);

	&.minimal {
		color: getColour(gray, 700);
		background-color: transparent;
		box-shadow: none;
	}

	@include isState('hover') {
		color: getColour(gray, 700);
		background-color: getColour(gray, 200);
		box-shadow: inset 0 0 0 1px getColour(gray, 400),
			var(--global--elevationBoxShadow--3);

		&.minimal {
			color: getColour(gray, 900);
			background-color: getColour(gray, 100);
			box-shadow: none;
		}
	}

	@include isState('active') {
		color: getColour(gray, 700);
		background-color: getColour(gray, 300);
		box-shadow: inset 0 0 0 1px getColour(gray, 500),
			var(--global--elevationBoxShadow--1);

		&.minimal {
			color: getColour(gray, 900);
			background-color: getColour(gray, 200);
			box-shadow: none;
		}
	}
}

.variantDanger {
	background-color: getColour(red, 600);
	box-shadow: inset 0 0 0 1px getColour(red, 700),
		0 1px 10px 0 rgba(0, 0, 0, 0.09), 0 4px 5px 0 rgba(0, 0, 0, 0.09),
		0 2px 4px -1px rgba(0, 0, 0, 0.15);

	&.minimal {
		color: getColour(gray, 700);
		background-color: transparent;
		box-shadow: none;
	}

	@include isState('hover') {
		color: white;
		background-color: getColour(red, 700);
		box-shadow: inset 0 0 0 1px getColour(red, 800),
			0 3px 14px 2px rgba(0, 0, 0, 0.09),
			0 8px 10px 1px rgba(0, 0, 0, 0.09),
			0 5px 5px -3px rgba(0, 0, 0, 0.15);

		&.minimal {
			color: getColour(red, 900);
			background-color: getColour(red, 100);
			box-shadow: none;
		}
	}

	@include isState('active') {
		color: white;
		background-color: getColour(red, 800);
		box-shadow: inset 0 0 0 1px getColour(red, 900),
			0 1px 5px 0 rgba(0, 0, 0, 0.09), 0 2px 2px 0 rgba(0, 0, 0, 0.09),
			0 3px 1px -2px rgba(0, 0, 0, 0.15);

		&.minimal {
			color: getColour(red, 900);
			background-color: getColour(red, 200);
			box-shadow: none;
		}
	}
}
