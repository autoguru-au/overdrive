// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<RadioButton /> when nested in a RadioGroup should match the snapshot for a checked radio 1`] = `
<div
  class="lightGrid radioGroup column"
  style="flex-wrap:nowrap;flex-direction:column;justify-content:flex-start;align-content:stretch;align-items:stretch;padding:var(--global--space--0);width:100%"
>
  <div
    class="root gridItem radio"
  >
    <input
      class="nativeInput"
      name="radio"
      type="radio"
      value="1"
    />
    <div
      class="checkable"
    >
      <div
        class="outerCircle"
      />
      <div
        class="innerCircle"
      />
    </div>
    <div
      class="focusRect"
    />
    <label
      class="label"
    >
      radio label 1
    </label>
  </div>
  <div
    class="root gridItem radio"
  >
    <input
      class="nativeInput"
      name="radio"
      type="radio"
      value="2"
    />
    <div
      class="checkable"
    >
      <div
        class="outerCircle"
      />
      <div
        class="innerCircle"
      />
    </div>
    <div
      class="focusRect"
    />
    <label
      class="label"
    >
      radio label 2
    </label>
  </div>
</div>
`;

exports[`<RadioButton /> when nested in a RadioGroup should match the snapshot for a focused radio 1`] = `
<Component
  label="radio label 1"
  value="1"
>
  <GridItem
    Component={[Function]}
    checked={false}
    className="radio"
    disabled={false}
    grow={1}
    handleClick={[Function]}
    inputName="radio"
    inputType="radio"
    label="radio label 1"
    shrink={0}
    value="1"
  >
    <CheckableBase
      checked={false}
      className="gridItem radio"
      disabled={false}
      handleClick={[Function]}
      inputName="radio"
      inputType="radio"
      label="radio label 1"
      style={
        Object {
          "flexBasis": "auto",
          "flexGrow": 1,
          "flexShrink": 0,
          "height": undefined,
          "margin": "calc(0.5 * var(--global--space--4)) 0",
          "minHeight": "auto",
          "width": undefined,
        }
      }
      value="1"
    >
      <div
        className="root gridItem radio"
      >
        <input
          checked={false}
          className="nativeInput"
          disabled={false}
          name="radio"
          onChange={[Function]}
          onClick={[Function]}
          type="radio"
          value="1"
        />
        <div
          className="checkable"
        >
          <div
            className="outerCircle"
          />
          <div
            className="innerCircle"
          />
        </div>
        <div
          className="focusRect"
        />
        <label
          className="label"
        >
          radio label 1
        </label>
      </div>
    </CheckableBase>
  </GridItem>
</Component>
`;

exports[`<RadioButton /> when nested in a RadioGroup should match the snapshot for a group of radios 1`] = `
<div
  class="lightGrid radioGroup column"
  style="flex-wrap:nowrap;flex-direction:column;justify-content:flex-start;align-content:stretch;align-items:stretch;padding:var(--global--space--0);width:100%"
>
  <div
    class="root gridItem radio"
  >
    <input
      class="nativeInput"
      name="radio"
      type="radio"
      value="1"
    />
    <div
      class="checkable"
    >
      <div
        class="outerCircle"
      />
      <div
        class="innerCircle"
      />
    </div>
    <div
      class="focusRect"
    />
    <label
      class="label"
    >
      radio label 1
    </label>
  </div>
  <div
    class="root gridItem radio"
  >
    <input
      class="nativeInput"
      name="radio"
      type="radio"
      value="2"
    />
    <div
      class="checkable"
    >
      <div
        class="outerCircle"
      />
      <div
        class="innerCircle"
      />
    </div>
    <div
      class="focusRect"
    />
    <label
      class="label"
    >
      radio label 2
    </label>
  </div>
  <div
    class="root gridItem radio"
  >
    <input
      class="nativeInput"
      name="radio"
      type="radio"
      value="3"
    />
    <div
      class="checkable"
    >
      <div
        class="outerCircle"
      />
      <div
        class="innerCircle"
      />
    </div>
    <div
      class="focusRect"
    />
    <label
      class="label"
    >
      radio label 3
    </label>
  </div>
  <div
    class="root gridItem radio"
  >
    <input
      class="nativeInput"
      name="radio"
      type="radio"
      value="4"
    />
    <div
      class="checkable"
    >
      <div
        class="outerCircle"
      />
      <div
        class="innerCircle"
      />
    </div>
    <div
      class="focusRect"
    />
    <label
      class="label"
    >
      radio label 4
    </label>
  </div>
</div>
`;

exports[`<RadioButton /> when nested in a RadioGroup should match the snapshot for a single radio 1`] = `
<div
  class="lightGrid radioGroup column"
  style="flex-wrap:nowrap;flex-direction:column;justify-content:flex-start;align-content:stretch;align-items:stretch;padding:var(--global--space--0);width:100%"
>
  <div
    class="root gridItem radio"
  >
    <input
      class="nativeInput"
      name="radio"
      type="radio"
      value="1"
    />
    <div
      class="checkable"
    >
      <div
        class="outerCircle"
      />
      <div
        class="innerCircle"
      />
    </div>
    <div
      class="focusRect"
    />
    <label
      class="label"
    >
      radio label 1
    </label>
  </div>
</div>
`;

exports[`<RadioButton /> when nested in a RadioGroup should match the snapshot for a single radio with no value or label 1`] = `
<div
  class="lightGrid radioGroup column"
  style="flex-wrap:nowrap;flex-direction:column;justify-content:flex-start;align-content:stretch;align-items:stretch;padding:var(--global--space--0);width:100%"
>
  <div
    class="root gridItem radio"
  >
    <input
      class="nativeInput"
      name="radio"
      type="radio"
    />
    <div
      class="checkable"
    >
      <div
        class="outerCircle"
      />
      <div
        class="innerCircle"
      />
    </div>
    <div
      class="focusRect"
    />
  </div>
</div>
`;
