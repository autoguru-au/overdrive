name: Prerelease

on:
    workflow_dispatch:

jobs:
    setup:
        name: Setup environment
        runs-on: ubuntu-latest
        outputs:
            node_version: ${{ steps.version.outputs.node_version }}
            has_prerelease: ${{ steps.exists.outputs.pre_exists }}
        steps:
            - uses: actions/checkout@main
              with:
                  fetch-depth: 0

            - name: Get Node version
              id: version
              run: |
                  echo "node_version=$(jq -r '.volta.node' package.json)" >> $GITHUB_OUTPUT

            - name: Check for changeset pre.json
              id: exists
              run: |
                  if [ -f ".changeset/pre.json" ]; then
                    echo "Prerelease found"
                    echo "pre_exists=true" >> $GITHUB_OUTPUT
                  else
                    echo "No prerelease found"
                    echo "pre_exists=false" >> $GITHUB_OUTPUT
                  fi

    prerelease:
        name: Prerelease publish
        needs: setup
        if: needs.setup.outputs.has_prerelease == 'true'
        runs-on: ubuntu-latest
        env:
            TZ: Australia/Brisbane
            CI: true
        steps:
            - uses: actions/checkout@main
              with:
                  fetch-depth: 0

            - name: Setup Node
              uses: actions/setup-node@main
              with:
                  node-version: ${{ needs.setup.outputs.node_version }}
                  cache: 'yarn'
                  registry-url: 'https://registry.npmjs.org'

            - name: Yarn install
              run: yarn --immutable

            - name: Store current package version
              id: current_version
              run:
                  echo "version=$(jq -r '.version' package.json)" >>
                  $GITHUB_OUTPUT

            - name: Changeset version
              run: yarn changeset version

            - name: Store new package version
              id: new_version
              run:
                  echo "version=$(jq -r '.version' package.json)" >>
                  $GITHUB_OUTPUT

            - name: Check if version changed
              id: version_check
              run: |
                  if [ "${{ steps.current_version.outputs.version }}" = "${{ steps.new_version.outputs.version }}" ]; then
                    echo "ðŸ“­ No version changes detected. Exiting prerelease workflow."
                    echo "changed=false" >> $GITHUB_OUTPUT
                  else
                    echo "ðŸ“¬ Version changed from ${{ steps.current_version.outputs.version }} to ${{ steps.new_version.outputs.version }}"
                    echo "changed=true" >> $GITHUB_OUTPUT
                  fi

            - name: Publish to npm with prerelease tag
              if: steps.version_check.outputs.changed == 'true'
              run: yarn changeset publish
              env:
                  NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

            - name: Get package version
              if: steps.version_check.outputs.changed == 'true' && success()
              id: version
              run:
                  echo "version=$(jq -r '.version' package.json)" >>
                  $GITHUB_OUTPUT

            - name: Create GitHub prerelease
              if: steps.version_check.outputs.changed == 'true' && success()
              uses: actions/create-release@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
              with:
                  tag_name: v${{ steps.version.outputs.version }}
                  release_name: v${{ steps.version.outputs.version }}
                  draft: false
                  prerelease: true
                  body: |
                      ### Prerelease version

                      - Install with: `yarn up @autoguru/overdrive@${{ steps.version.outputs.version }}`

            - name: Commit version changes
              if: steps.version_check.outputs.changed == 'true' && success()
              # purposely not checking in CHANGELOG.md to the working branch
              run: |
                  git config --local user.email "action@github.com"
                  git config --local user.name "GitHub Action"
                  git add package.json yarn.lock .changeset
                  git commit -m "Prerelease Version v${{ steps.version.outputs.version }}" || exit 0
                  git push origin HEAD:${{ github.head_ref || github.ref_name }}

            - name: Post-publish Notifications
              if: steps.version_check.outputs.changed == 'true' && success()
              run: |
                  echo "ðŸ“¦ Prerelease Published: ${{ steps.version.outputs.version }}"
                  echo "ðŸ”— NPM URL: https://www.npmjs.com/package/$(node -p "require('./package.json').name")"
